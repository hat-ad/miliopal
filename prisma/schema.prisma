generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BusinessSeller {
  id                 String   @id @default(uuid())
  companyName        String?
  contactPerson      String?
  organizationNumber String
  seller             Seller   @relation(fields: [id], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PrivateSeller {
  id        String   @id @default(uuid())
  name      String?
  seller    Seller   @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String               @id @default(uuid())
  name               String?
  price              Float
  isDeleted          Boolean              @default(false)
  isArchived         Boolean              @default(false)
  organizationId     String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organization       Organization?        @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  productsPurchased  ProductsPurchased[]
  ProductForDelivery ProductForDelivery[]
}

model ProductsPurchased {
  id         String   @id @default(uuid())
  productId  String
  price      Float
  quantity   Int
  purchaseId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
}

enum OrderStatus {
  PAID
  UNPAID
}

model Purchase {
  id                String              @id @default(uuid())
  orderNo           String
  comment           String?
  paymentMethod     PaymentMethod
  bankAccountNumber String?
  totalAmount       Int?
  notes             String?
  sellerId          String
  userId            String
  status            OrderStatus
  isArchived        Boolean             @default(false)
  organizationId    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  organization      Organization?       @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller            Seller              @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productsPurchased ProductsPurchased[]
}

enum SellerType {
  PRIVATE
  BUSINESS
}

model Seller {
  id             String           @id @default(uuid())
  email          String           @unique
  type           SellerType
  phone          String?
  address        String?
  postalCode     String?
  city           String?
  privateSeller  PrivateSeller?
  businessSeller BusinessSeller?
  isArchived     Boolean          @default(false)
  isDeleted      Boolean          @default(false)
  organizationId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  purchases      Purchase[]
  PickUpDelivery PickUpDelivery[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id             String           @id @default(uuid())
  name           String?
  phone          String?
  otp            String?
  otpExpiry      DateTime?
  email          String           @unique
  password       String?
  role           Role             @default(USER)
  token          String?
  isActive       Boolean          @default(false)
  isArchived     Boolean          @default(false)
  isDeleted      Boolean          @default(false)
  organizationId String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  purchases      Purchase[]
  PickUpDelivery PickUpDelivery[]
}

model Organization {
  id                 String           @id @default(uuid())
  companyName        String?
  address            String?
  postalCode         String?
  city               String?
  organizationNumber String           @unique // Ensure it's unique
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  users              User[]
  sellers            Seller[]
  products           Product[]
  purchases          Purchase[]
  receipts           Receipt[]
  pickupDeliveries   PickUpDelivery[]
}

model Receipt {
  id                  String        @id @default(uuid())
  organizationId      String
  startingOrderNumber Int
  currentOrderNumber  Int
  logo                String?
  receiptText         String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  organization        Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ProductForDelivery {
  id               String         @id @default(uuid())
  productId        String
  pickUpDeliveryId String
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  pickUpDelivery   PickUpDelivery @relation(fields: [pickUpDeliveryId], references: [id], onDelete: Cascade)
}

model PickUpDelivery {
  id                  String               @id @default(uuid())
  PONumber            String
  comment             String?
  sellerId            String
  userId              String
  isArchived          Boolean              @default(false)
  organizationId      String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  organization        Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller              Seller               @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productsForDelivery ProductForDelivery[]
}
