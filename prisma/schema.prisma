
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model BusinessSeller {
  id         String     @id @default(uuid())
  companyName       String
  contactPerson     String
  organizationNumber Float
  seller     Seller   @relation(fields: [id], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}





model PrivateSeller {
  id         String     @id @default(uuid())
  name       String?
  seller     Seller   @relation(fields: [id], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}





model Product {
  id         String     @id @default(uuid())
  name       String?
  price      Float
  isDeleted  Boolean    @default(false)
  isActive   Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}


model ProductsPurchased {
  id          String  @id @default(uuid())
  productId   String
  price       Decimal
  quantity    Int
  purchaseId  String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}


enum PaymentMethod {
  CASH
  BANK_TRANSFER
}

enum OrderStatus {
  PAID
  UNPAID
}

model Purchase {
  id                 String    @id @default(uuid())
  orderNo            String    @unique
  comment           String?
  paymentMethod      PaymentMethod
  bankAccountNumber  String?
  sellerId           String
  userId            String
  status             OrderStatus
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}



enum SellerType {
  PRIVATE
  BUSINESS
}

model Seller {
  id         String     @id @default(uuid())
  email      String     @unique
  type       SellerType
  phone      String?
  address    String?
  postalCode String?
  city       String?
  privateSeller  PrivateSeller?
  businessSeller BusinessSeller?
  isDeleted  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}


enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id         String     @id @default(uuid())
  name       String?
  phone      String?
  email      String     @unique
  password    String?
  role        Role     @default(USER)
  token       String?
  isActive  Boolean    @default(false)
  isDeleted  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}
