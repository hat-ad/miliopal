generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BusinessSeller {
  id                 String   @id @default(uuid())
  companyName        String?
  contactPerson      String?
  organizationNumber String
  seller             Seller   @relation(fields: [id], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model PrivateSeller {
  id        String   @id @default(uuid())
  name      String?
  seller    Seller   @relation(fields: [id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String               @id @default(uuid())
  name               String
  isDeleted          Boolean              @default(false)
  isArchived         Boolean              @default(false)
  organizationId     String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organization       Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  productsPurchased  ProductsPurchased[]
  ProductForDelivery ProductForDelivery[]
  ProductPrice       ProductPrice[]
}

model ProductsPurchased {
  id            String   @id @default(uuid())
  productId     String
  price         Float
  categoryPrice Float
  quantity      Int
  purchaseId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  BANK_TRANSFER_INTERNATIONAL
}

enum OrderStatus {
  PAID
  UNPAID
}

enum PurchaseType {
  PURCHASE
  CREDIT
}

model Purchase {
  id                String        @id @default(uuid())
  orderNo           String
  comment           String?
  paymentMethod     PaymentMethod
  bankAccountNumber String?
  transactionDate   DateTime?
  totalAmount       Int           @default(0)
  notes             String?
  sellerId          String
  userId            String
  priceCategoryId   String?

  status         OrderStatus
  isArchived     Boolean       @default(false)
  organizationId String
  creditOrderId  String?
  purchaseType   PurchaseType  @default(PURCHASE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller         Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  priceCategory  PriceCategory? @relation(fields: [priceCategoryId], references: [id], onDelete: Cascade)

  productsPurchased ProductsPurchased[]
}

enum SellerType {
  PRIVATE
  BUSINESS
}

model Seller {
  id                         String                       @id @default(uuid())
  email                      String
  type                       SellerType
  phone                      String?
  address                    String?
  postalCode                 String?
  city                       String?
  bankAccountNumber          String?
  paymentMethod              PaymentMethod                @default(CASH)
  privateSeller              PrivateSeller?
  businessSeller             BusinessSeller?
  isArchived                 Boolean                      @default(false)
  isDeleted                  Boolean                      @default(false)
  organizationId             String
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  organization               Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchases                  Purchase[]
  PickUpDelivery             PickUpDelivery[]
  PrivateSellerPurchaseStats PrivateSellerPurchaseStats[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id                  String                  @id @default(uuid())
  name                String?
  phone               String?
  otp                 String?
  otpExpiry           DateTime?
  email               String                  @unique
  password            String?
  role                Role                    @default(USER)
  token               String?
  isActive            Boolean                 @default(false)
  isArchived          Boolean                 @default(false)
  isDeleted           Boolean                 @default(false)
  organizationId      String
  wallet              Float                   @default(0)
  lastReconciled      DateTime?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  organization        Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  purchases           Purchase[]
  PickUpDelivery      PickUpDelivery[]
  actionByUser        CashHistory[]           @relation("ActionByDetails")
  actionToUsers       CashHistory[]           @relation("ActionToDetails")
  reconciliations     ReconciliationHistory[] @relation("ReconciledHistory")
  reconciliationsMade ReconciliationHistory[] @relation("Reconciliator")
}

model Organization {
  id                    String                  @id @default(uuid())
  companyName           String?
  address               String?
  postalCode            String?
  city                  String?
  organizationNumber    String                  @unique // Ensure it's unique
  wallet                Float
  phone                 String?
  email                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  users                 User[]
  sellers               Seller[]
  products              Product[]
  purchases             Purchase[]
  receipts              Receipt[]
  pickupDeliveries      PickUpDelivery[]
  CashHistory           CashHistory[]
  ReconciliationHistory ReconciliationHistory[]
  TodoListSettings      TodoListSettings?
  PriceCategory         PriceCategory[]
  ProductPrice          ProductPrice[]
}

model Receipt {
  id                  String       @id @default(uuid())
  organizationId      String
  startingOrderNumber Int
  currentOrderNumber  Int
  logo                String?
  receiptText         String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model ProductForDelivery {
  id               String         @id @default(uuid())
  productId        String
  pickUpDeliveryId String
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  product          Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  pickUpDelivery   PickUpDelivery @relation(fields: [pickUpDeliveryId], references: [id], onDelete: Cascade)
}

model PickUpDelivery {
  id              String  @id @default(uuid())
  PONumber        String?
  comment         String?
  sellerId        String
  userId          String
  priceCategoryId String

  isArchived     Boolean       @default(false)
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller         Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  priceCategory  PriceCategory @relation(fields: [priceCategoryId], references: [id], onDelete: Cascade)

  productsForDelivery ProductForDelivery[]
}

enum CashHistoryType {
  DEPOSIT
  WITHDRAW
}

enum AccountType {
  COMPANY
  INDIVIDUAL
}

model CashHistory {
  id              String          @id @default(uuid())
  amount          Float
  note            String?
  type            CashHistoryType
  accountType     AccountType
  organizationId  String
  actionBy        String
  actionTo        String?
  date            DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actionByDetails User            @relation(fields: [actionBy], references: [id], onDelete: Cascade, name: "ActionByDetails")
  actionToDetails User?           @relation(fields: [actionTo], references: [id], onDelete: SetNull, name: "ActionToDetails")
}

model ReconciliationHistory {
  id                      BigInt       @id @default(autoincrement())
  userId                  String
  reConciliatedBy         String
  organizationId          String
  expectedAmount          Float
  amountCounted           Float
  comment                 String?
  reconciliationStartTime DateTime
  reconciliationEndTime   DateTime
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  organization            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade, name: "ReconciledHistory")
  reconciliator           User         @relation(fields: [reConciliatedBy], references: [id], onDelete: Cascade, name: "Reconciliator")
}

enum TodoListEvent {
  COMPANY_CASH_BALANCE_BELOW_THRESHOLD
  INDIVIDUAL_CASH_BALANCE_BELOW_THRESHOLD
  PRIVATE_SELLER_SALES_ABOVE_THRESHOLD
  PURCHASE_INITIATED_WITH_BANK_TRANSFER
  ORDER_PICKUP_INITIATED
}

enum TodoListStatus {
  DONE
  PENDING
}

model TodoList {
  id             String         @id @default(uuid())
  organizationId String
  meta           Json
  event          TodoListEvent
  priority       Int            @default(0)
  status         TodoListStatus @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model TodoListSettings {
  id                                      String       @id @default(uuid())
  organizationId                          String       @unique
  companyCashBalanceLowerThreshold        Float?
  individualCashBalanceLowerThreshold     Float?
  privateSellerSalesBalanceUpperThreshold Float?
  createdAt                               DateTime     @default(now())
  updatedAt                               DateTime     @updatedAt
  organization                            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model SellerInvite {
  id             String     @id @default(uuid())
  email          String?    @unique
  organizationId String
  sellerType     SellerType @default(BUSINESS)
  inviteExpiry   DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model PrivateSellerPurchaseStats {
  id               String   @id @default(uuid())
  organizationId   String
  sellerId         String   @unique
  totalSales       Float    @default(0)
  totalQuantity    Int      @default(0)
  isNotified       Boolean  @default(false)
  lastReconciledAt DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  seller           Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model PriceCategory {
  id             String           @id @default(uuid())
  organizationId String
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  productPrices  ProductPrice[]
  Purchase       Purchase[]
  PickUpDelivery PickUpDelivery[]
}

model ProductPrice {
  id              String   @id @default(uuid())
  organizationId  String
  productId       String
  priceCategoryId String
  price           Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  priceCategory PriceCategory @relation(fields: [priceCategoryId], references: [id], onDelete: Cascade)
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}
